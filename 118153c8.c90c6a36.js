(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{167:function(e,r,t){"use strict";t.d(r,"a",(function(){return l})),t.d(r,"b",(function(){return j}));var a=t(0),n=t.n(a);function b(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function c(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function p(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?c(Object(t),!0).forEach((function(r){b(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},b=Object.keys(e);for(a=0;a<b.length;a++)t=b[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(a=0;a<b.length;a++)t=b[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=n.a.createContext({}),o=function(e){var r=n.a.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):p(p({},r),e)),t},l=function(e){var r=o(e.components);return n.a.createElement(s.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.a.createElement(n.a.Fragment,{},r)}},O=n.a.forwardRef((function(e,r){var t=e.components,a=e.mdxType,b=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),l=o(t),O=a,j=l["".concat(c,".").concat(O)]||l[O]||m[O]||b;return t?n.a.createElement(j,p(p({ref:r},s),{},{components:t})):n.a.createElement(j,p({ref:r},s))}));function j(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var b=t.length,c=new Array(b);c[0]=O;var p={};for(var i in r)hasOwnProperty.call(r,i)&&(p[i]=r[i]);p.originalType=e,p.mdxType="string"==typeof e?e:a,c[1]=p;for(var s=2;s<b;s++)c[s]=t[s];return n.a.createElement.apply(null,c)}return n.a.createElement.apply(null,t)}O.displayName="MDXCreateElement"},64:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return c})),t.d(r,"metadata",(function(){return p})),t.d(r,"rightToc",(function(){return i})),t.d(r,"default",(function(){return o}));var a=t(2),n=t(6),b=(t(0),t(167)),c={},p={unversionedId:"os/regular-expression",id:"os/regular-expression",isDocsHomePage:!1,title:"regular-expression",description:"Regular Expression",source:"@site/docs/os/regular-expression.md",slug:"/os/regular-expression",permalink:"/docs/os/regular-expression",version:"current"},i=[{value:"Anchors",id:"anchors",children:[]},{value:"Character Classes",id:"character-classes",children:[]},{value:"POSIX Character Classes",id:"posix-character-classes",children:[]},{value:"Assertions",id:"assertions",children:[]},{value:"Sample Patterns",id:"sample-patterns",children:[]},{value:"Quantifiers",id:"quantifiers",children:[]},{value:"Special Characters",id:"special-characters",children:[]},{value:"String Replacement (Backreferences)",id:"string-replacement-backreferences",children:[]},{value:"Ranges",id:"ranges",children:[]},{value:"Pattern Modifiers",id:"pattern-modifiers",children:[]},{value:"Metacharacters",id:"metacharacters",children:[]}],s={rightToc:i};function o(e){var r=e.components,t=Object(n.a)(e,["components"]);return Object(b.b)("wrapper",Object(a.a)({},s,t,{components:r,mdxType:"MDXLayout"}),Object(b.b)("h1",{id:"regular-expression"},"Regular Expression"),Object(b.b)("h2",{id:"anchors"},"Anchors"),Object(b.b)("p",null,"^ - start of line",Object(b.b)("br",{parentName:"p"}),"\n","\\A - start of string",Object(b.b)("br",{parentName:"p"}),"\n","$ - end of line",Object(b.b)("br",{parentName:"p"}),"\n","\\Z - end of string",Object(b.b)("br",{parentName:"p"}),"\n","\\b Word boundary",Object(b.b)("br",{parentName:"p"}),"\n","\\B Not a word boundary",Object(b.b)("br",{parentName:"p"}),"\n","\\< - star of word",Object(b.b)("br",{parentName:"p"}),"\n",">"," - end of word  "),Object(b.b)("h2",{id:"character-classes"},"Character Classes"),Object(b.b)("p",null,"\\c - control character",Object(b.b)("br",{parentName:"p"}),"\n","\\s - white space",Object(b.b)("br",{parentName:"p"}),"\n","\\d - digit",Object(b.b)("br",{parentName:"p"}),"\n","\\D - not digit",Object(b.b)("br",{parentName:"p"}),"\n","\\w - word",Object(b.b)("br",{parentName:"p"}),"\n","\\W - not word",Object(b.b)("br",{parentName:"p"}),"\n","\\xhh - hexadecimal character hh",Object(b.b)("br",{parentName:"p"}),"\n","\\Oxxx - octal character xxx  "),Object(b.b)("h2",{id:"posix-character-classes"},"POSIX Character Classes"),Object(b.b)("p",null,"[:upper:]"," - upper case letters",Object(b.b)("br",{parentName:"p"}),"\n","[:lower:]"," - lower case letters",Object(b.b)("br",{parentName:"p"}),"\n","[:alpha:]"," - all letters",Object(b.b)("br",{parentName:"p"}),"\n","[:alnum:]"," - digits and letters",Object(b.b)("br",{parentName:"p"}),"\n","[:digit:]"," - digits",Object(b.b)("br",{parentName:"p"}),"\n","[:xdigit:]"," - hexadecimal digits",Object(b.b)("br",{parentName:"p"}),"\n","[:punct:]"," - punctuation",Object(b.b)("br",{parentName:"p"}),"\n","[:blank:]"," - space and tab",Object(b.b)("br",{parentName:"p"}),"\n","[:space:]"," - blank characters",Object(b.b)("br",{parentName:"p"}),"\n","[:cntrl:]"," - control characters",Object(b.b)("br",{parentName:"p"}),"\n","[:graph:]"," - printed characters",Object(b.b)("br",{parentName:"p"}),"\n","[:print:]"," - printed characters and spaces",Object(b.b)("br",{parentName:"p"}),"\n","[:word:]"," - digits, letters, and underscore  "),Object(b.b)("h2",{id:"assertions"},"Assertions"),Object(b.b)("p",null,"?= - lookahead assertion",Object(b.b)("br",{parentName:"p"}),"\n","?! - negative lookahead",Object(b.b)("br",{parentName:"p"}),"\n","?<= - lookbehind assertion",Object(b.b)("br",{parentName:"p"}),"\n","?!= or ?<! - negative lookbehind",Object(b.b)("br",{parentName:"p"}),"\n","?> - once only subexpression",Object(b.b)("br",{parentName:"p"}),"\n","?() - condition (if then)",Object(b.b)("br",{parentName:"p"}),"\n","?()| - condition (if then else)",Object(b.b)("br",{parentName:"p"}),"\n","?# - comment  "),Object(b.b)("h2",{id:"sample-patterns"},"Sample Patterns"),Object(b.b)("p",null,"(","[A-Za-z0-9-]","+) - letters, numbers, and hyphens\n(\\d{1,2}\\/\\d{1,2}\\/\\d{4}) - date (21/3/2006)",Object(b.b)("br",{parentName:"p"}),"\n","(",Object(b.b)("sup",Object(a.a)({parentName:"p"},{id:"fnref-\\s"}),Object(b.b)("a",Object(a.a)({parentName:"sup"},{href:"#fn-\\s",className:"footnote-ref"}),"\\s")),"+(?=",".","(jpg|gif|png))",".","\\2) - jpg, gif, or png image",Object(b.b)("br",{parentName:"p"}),"\n","(^","[1-9]","{1}$|^","[1-4]","{1}","[0-9]","{1}$|^50$) - any number from 1 to 50 inclusive",Object(b.b)("br",{parentName:"p"}),"\n","(#?(","[A-Fa-f0-9]","){3}((","[A-Fa-f0-9]","){3})?) - valid hexidecimal color code",Object(b.b)("br",{parentName:"p"}),"\n","((?=.",Object(b.b)("em",{parentName:"p"},"\\d)(?=."),"[a-z]",")(?=.*","[A-Z]",").{8,15}) - 8 to 15 character string with at least one upper case letter, one lower case letter, and one digit (useful for passwords)",Object(b.b)("br",{parentName:"p"}),"\n","(\\w+@","[a-zA-Z_]","+?",".","[a-zA-Z]","{2,6}) - email addresses",Object(b.b)("br",{parentName:"p"}),"\n","(\\<(/?",Object(b.b)("sup",Object(a.a)({parentName:"p"},{id:"fnref-\\>"}),Object(b.b)("a",Object(a.a)({parentName:"sup"},{href:"#fn-\\>",className:"footnote-ref"}),"\\>")),"+)",">",") - HTML tags  "),Object(b.b)("h2",{id:"quantifiers"},"Quantifiers"),Object(b.b)("p",null,Object(b.b)("inlineCode",{parentName:"p"},"*")," - 0 or more",Object(b.b)("br",{parentName:"p"}),"\n",Object(b.b)("inlineCode",{parentName:"p"},"*?")," - 0 or more, ungreedy",Object(b.b)("br",{parentName:"p"}),"\n",Object(b.b)("inlineCode",{parentName:"p"},"+")," - 1 or more",Object(b.b)("br",{parentName:"p"}),"\n","+? - 1 or more, ungreedy",Object(b.b)("br",{parentName:"p"}),"\n","? - 0 or 1",Object(b.b)("br",{parentName:"p"}),"\n","?? - 0 or 1, ungreedy",Object(b.b)("br",{parentName:"p"}),"\n","{3} - exactly 3",Object(b.b)("br",{parentName:"p"}),"\n","{3,} - 3 or more",Object(b.b)("br",{parentName:"p"}),"\n","{3,5} - 3, 4, or 5",Object(b.b)("br",{parentName:"p"}),"\n","{3,5}? - 3, 4, or 5, ungreedy  "),Object(b.b)("h2",{id:"special-characters"},"Special Characters"),Object(b.b)("p",null,"\\ - escape character",Object(b.b)("br",{parentName:"p"}),"\n","\\n - new line",Object(b.b)("br",{parentName:"p"}),"\n","\\r - carriage",Object(b.b)("br",{parentName:"p"}),"\n","\\t - tab",Object(b.b)("br",{parentName:"p"}),"\n","\\v - vertical tab",Object(b.b)("br",{parentName:"p"}),"\n","\\f - form feed",Object(b.b)("br",{parentName:"p"}),"\n","\\a - alarm",Object(b.b)("br",{parentName:"p"}),"\n","[\\b]"," - backspace",Object(b.b)("br",{parentName:"p"}),"\n","\\e - escape",Object(b.b)("br",{parentName:"p"}),"\n","\\N{name} - named character  "),Object(b.b)("h2",{id:"string-replacement-backreferences"},"String Replacement (Backreferences)"),Object(b.b)("p",null,"$n - nth non-passive group",Object(b.b)("br",{parentName:"p"}),"\n",'$2 - "xyz" in /^(abc(xyz))$/',Object(b.b)("br",{parentName:"p"}),"\n",'$1 - "xyz" in /^(?:abc)(xyz)$/',Object(b.b)("br",{parentName:"p"}),"\n","$` - before matched string",Object(b.b)("br",{parentName:"p"}),"\n","$' - after matched string",Object(b.b)("br",{parentName:"p"}),"\n","$+ - last matched string",Object(b.b)("br",{parentName:"p"}),"\n","$& - entire matched string",Object(b.b)("br",{parentName:"p"}),"\n","$_ - entire input string",Object(b.b)("br",{parentName:"p"}),"\n",'$$ - literal "$"  '),Object(b.b)("h2",{id:"ranges"},"Ranges"),Object(b.b)("p",null,". - any character except new line (\\n)",Object(b.b)("br",{parentName:"p"}),"\n","(a|b) - a or b",Object(b.b)("br",{parentName:"p"}),"\n","(...) - group",Object(b.b)("br",{parentName:"p"}),"\n","(?:...) - passive group",Object(b.b)("br",{parentName:"p"}),"\n","[abc]"," - range (a or b or c)",Object(b.b)("br",{parentName:"p"}),"\n",Object(b.b)("sup",Object(a.a)({parentName:"p"},{id:"fnref-abc"}),Object(b.b)("a",Object(a.a)({parentName:"sup"},{href:"#fn-abc",className:"footnote-ref"}),"abc"))," - not a or b or c",Object(b.b)("br",{parentName:"p"}),"\n","[a-q]"," - letter between a and q",Object(b.b)("br",{parentName:"p"}),"\n","[A-Q]"," - upper case letter between A and Q",Object(b.b)("br",{parentName:"p"}),"\n","[0-7]"," - digit between 0 and 7",Object(b.b)("br",{parentName:"p"}),"\n","\\n - nth group/subpattern  "),Object(b.b)("p",null,"Note: Ranges are inclusive  "),Object(b.b)("h2",{id:"pattern-modifiers"},"Pattern Modifiers"),Object(b.b)("p",null,"g - global match",Object(b.b)("br",{parentName:"p"}),"\n","i - case-insensitive",Object(b.b)("br",{parentName:"p"}),"\n","m - multiple lines",Object(b.b)("br",{parentName:"p"}),"\n","s - treat string as single line",Object(b.b)("br",{parentName:"p"}),"\n","x - allow comments and white space in pattern",Object(b.b)("br",{parentName:"p"}),"\n","e - evaluate replacement",Object(b.b)("br",{parentName:"p"}),"\n","U - ungreedy pattern  "),Object(b.b)("h2",{id:"metacharacters"},"Metacharacters"),Object(b.b)("p",null,"Metacharacters must be escaped.",Object(b.b)("br",{parentName:"p"}),"\n","^",Object(b.b)("br",{parentName:"p"}),"\n","$",Object(b.b)("br",{parentName:"p"}),"\n","(",Object(b.b)("br",{parentName:"p"}),"\n",")",Object(b.b)("br",{parentName:"p"}),"\n","<  "),Object(b.b)("blockquote",null,Object(b.b)("p",{parentName:"blockquote"},"[",Object(b.b)("br",{parentName:"p"}),"\n","{",Object(b.b)("br",{parentName:"p"}),"\n","\\",Object(b.b)("br",{parentName:"p"}),"\n","|",Object(b.b)("br",{parentName:"p"}),"\n",".  "),Object(b.b)("ul",{parentName:"blockquote"},Object(b.b)("li",{parentName:"ul"})),Object(b.b)("ul",{parentName:"blockquote"},Object(b.b)("li",{parentName:"ul"},"?  "))))}o.isMDXComponent=!0}}]);